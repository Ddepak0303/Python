n=input("Enter the number of vertices: ")
while n=='' or not n.isnumeric() or int(n)<=1:#validating n
	n=input("Please enter 'INTEGER' greater than 1\nEnter the number of vertices: ")
n=int(n)

q=[[[] for i in range(n)] for i in range(n+1)]

#Taking value from user for Q[0]
print("Enter the value of Q[0] (weighted matrix) \nFor Infinite values enter value 'i' \n\nTaking value from user for Q[0]")
for a in range(n):
     for b in range(n):
     	d=input("Enter the values of ("+str(a+1)+ ","+ str(b+1)+") ")
     	while d=='' or not d.isnumeric():#validating q[0] values
     		d=input("Please enter 'INTEGER' value\nEnter the values of ("+str(a+1)+ ","+ str(b+1)+") ")
     	q[0][a].append(float('inf') if d=='i' or d=='I' or d=='0' or float(d)==0 else int(d))

#printing Q[0]
print("printing Q[0]|\n\n\nQ["+str(0)+"]")
for a in q:
	for b in a:
		print(b)
	break
		
#main execution and displaying step by step solution for Each element
print("\n\nmain execution and displaying step by step solution for Each column")
for i in range(1,n+1):
	print("\n\nQ["+str(i)+"]")
	for a in range(n):
		for b in range(n):
			q[i][a].append(min([ q[i-1][a][b] , q[i-1][a][i-1]+q[i-1][i-1][b] ]))
			print("Q["+str(i)+"](",a+1,",",b+1,") = min of { Q["+str(i-1)+"]["+str(a+1)+"]["+str(b+1)+"] , Q["+str(i-1)+"]["+str(a+1)+"]["+str(i)+"] + Q["+str(i-1)+"]["+str(i)+"]["+str(b+1)+"] } = min of {",  str("I><I") if q[i-1][a][b] ==float('inf') else q[i-1][a][b]   ," , ",   str("I><I") if q[i-1][a][i-1] ==float('inf') else q[i-1][a][i-1]   ,"+", str("I><I") if q[i-1][i-1][b] ==float('inf') else q[i-1][i-1][b]  ,"} = ", str("I><I") if  min([ q[i-1][a][b] , q[i-1][a][i-1]+q[i-1][i-1][b] ]) ==float('inf') else min([ q[i-1][a][b] , q[i-1][a][i-1]+q[i-1][i-1][b] ]))
			
			
#update infinity symbol
for i in range(1,n+1):
	for a in range(n):
		for b in range(n):
			if q[i][a][b] == float('inf') :
				q[i][a][b]=str("I><I")

#printing all Q matrix
i=1
for a in q[1:]:
	print("\n\nQ["+str(i)+"]")
	i+=1
	for b in a:
		print(b)
